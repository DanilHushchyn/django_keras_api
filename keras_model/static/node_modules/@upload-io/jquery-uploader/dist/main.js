/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

;// CONCATENATED MODULE: external "uploader"
var external_uploader_namespaceObject = require("uploader");;
;// CONCATENATED MODULE: ./src/index.ts
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }



(function ($) {
  var uploader;
  $.extend({
    uploader: {
      init: function init(uploadOrConfig) {
        uploader = (0,external_uploader_namespaceObject.Uploader)(uploadOrConfig);
      }
    }
  });

  var useUploader = function useUploader(callback) {
    if (uploader === undefined) {
      console.error("[jquery-uploader] Initialization required, e.g. $.uploader.init({apiKey: 'free'})");
    } else {
      callback(uploader);
    }
  };

  var funcs = $.fn;

  funcs.uploader = function (optionsMaybe) {
    var _this = this;

    var _a, _b;

    var handleOnComplete = function handleOnComplete(promise) {
      promise.then(function (files) {
        var onComplete = optionsMaybe === null || optionsMaybe === void 0 ? void 0 : optionsMaybe.onComplete;

        if (onComplete !== undefined) {
          onComplete(files);
        }
      }, function (e) {
        return console.error("[jquery-uploader] Unexpected error.", e);
      });
    };

    if ((optionsMaybe === null || optionsMaybe === void 0 ? void 0 : optionsMaybe.layout) === "inline" || (optionsMaybe === null || optionsMaybe === void 0 ? void 0 : optionsMaybe.dropzone) === true || _typeof(optionsMaybe === null || optionsMaybe === void 0 ? void 0 : optionsMaybe.dropzone) === "object") {
      var dropzone = _typeof(optionsMaybe === null || optionsMaybe === void 0 ? void 0 : optionsMaybe.dropzone) === "object" ? optionsMaybe === null || optionsMaybe === void 0 ? void 0 : optionsMaybe.dropzone : undefined;
      $(this).css({
        position: "relative",
        width: "100%",
        minWidth: "280px",
        maxWidth: (_a = dropzone === null || dropzone === void 0 ? void 0 : dropzone.width) !== null && _a !== void 0 ? _a : "600px",
        height: (_b = dropzone === null || dropzone === void 0 ? void 0 : dropzone.height) !== null && _b !== void 0 ? _b : "375px"
      });
      useUploader(function (u) {
        return $(_this).get().forEach(function (element) {
          handleOnComplete(u.open(Object.assign(Object.assign({}, optionsMaybe), {
            layout: "inline",
            container: element
          })));
        });
      });
    } else {
      $(this).on("click", function () {
        useUploader(function (u) {
          return handleOnComplete(u.open(optionsMaybe));
        });
      });
    }

    return this;
  };
})(jQuery);
module.exports = __webpack_exports__;
/******/ })()
;